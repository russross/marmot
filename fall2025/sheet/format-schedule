#!/usr/bin/env python3

ID = 22
PREVIOUS_FILE = 'previous.csv'
NEW_CSV = 'updated.csv'
DB_FILE = '../timetable.db'
MINUTE_MAP = {
    'MW': 75,
    'TR': 75,
    'MWF': 50,
    'M': 150,
    'T': 150,
    'W': 150,
    'R': 50,
    'F': 50,
}
CAPACITY_MAP = {
    'Smith 107': '32',
    'Smith 108': '32',
    'Smith 109': '32',
    'Smith 112': '24',
    'Smith 113': '24',
    'Smith 116': '38',
    'Smith 117': '38',
}
FACULTY_IDS = {
    'Bart Stander':     '00003379',
    'Bob Nielson':      '00145686',
    'Brayden Connole':  '00525693',
    'Carol Stander':    '00004136',
    'Curtis Larsen':    '00003064',
    'Philip Daley':     '00227773',
    'DJ Holt':          '00005694',
    'Eric Pedersen':    '00002139',
    'Jay Sneddon':      '00336758',
    'Jeff Compas':      '00509394',
    'Joe Francom':      '00003177',
    'Lora Klein':       '00264610',
    'Matt Kearl':       '00117731',
    'Phil Daley':       '00227773',
    'Ren Quinn':        '00171908',
    'Rex Frisbey':      '00111327',
    'Russ Ross':        '00051975',
    'Tom Picklesimer':  '00131833',
    'Yuanfei Sun':      '00525373',
}

# columns
CRN=0
FID=1
LNAME=2
FNAME=3
SUBJECT=6
COURSE=7
SECTION=8
TITLE=9
CAMPUS=10
ACTIVE=11
LEC=12
DELIVERY=13
SESSION=14
CREDITS=15
WLF=16
BUD=17
DAYS=19
BEGTIME=20
ENDTIME=21
CAP=22
ENROLL=23
#WAITCAP=24
WAITACT=24
BLDG=25
ROOM=26
XLIST=27

import csv
import json
import sys
import sqlite3

def get_old(filename):
    result = []
    with open(filename) as fp:
        reader = csv.reader(fp)
        for row in reader:
            result.append(row[:XLIST+1])
    return result

def get_new(filename, id):
    db = sqlite3.connect(filename)
    rows = db.execute('''
        SELECT faculty, section, room, time_slot
        FROM placement_sections
        NATURAL FULL OUTER JOIN faculty_sections
        WHERE placement_id = ? OR placement_id IS NULL
        ORDER BY faculty, section''', (id,)).fetchall()
    return list(rows)

def split_fields(row):
    (raw_instructor, raw_course, raw_room, raw_time) = row
    
    # skip sections that are included just to force conflicts
    # but are not actually ours
    if raw_time is not None and raw_room is None:
        # PATCH
        if raw_course == 'SE 4990-01':
            raw_room = ''
        else:
            return None

    out = [''] * (XLIST+1)

    if raw_instructor is None:
        (fname, lname) = ('', '')
    elif '.' in raw_instructor:
        (fname, lname) = raw_instructor.split('.')
    elif ' ' in raw_instructor:
        (fname, lname) = raw_instructor.split()
    else:
        (fname, lname) = (raw_instructor, '')
    if fname == 'adjunct':
        (fname, lname) = (lname, '')
    if fname == 'unknown':
        (fname, lname) = ('', '')
    if f'{fname} {lname}' in FACULTY_IDS:
        out[FID] = FACULTY_IDS[f'{fname} {lname}']
    (out[FNAME], out[LNAME]) = (fname, lname)

    space = raw_course.index(' ')
    hyphen = raw_course.index('-')
    subject = raw_course[:space]
    course = raw_course[space+1:hyphen]
    section_n = raw_course[hyphen+1:]
    if subject not in ('CS', 'IT', 'SD', 'SE', 'SET', 'ZZ'):
        print(repr(row))
        print('unknown course prefix:', row)
        sys.exit(1)
    out[SUBJECT] = subject
    out[COURSE] = course
    out[SECTION] = section_n
    credits = get_credits(raw_course)

    if raw_room is not None and raw_time is None:
        print(f'section {raw_course} has room {raw_room} but no time')
        sys.exit(1)
    elif raw_room is None and raw_time is not None:
        print(f'section {raw_course} has time slot {raw_time} but no room')
        sys.exit(1)
    elif raw_room is None and raw_time is None:
        # online/individual
        if section_n.startswith('4'):
            # online
            out[CAP] = '40'
            out[BLDG] = 'ONLINE'
            out[CAMPUS] = 'O01'
            out[LEC] = 'LEC'
            out[WLF] = credits
            out[DELIVERY] = 'I'
        else:
            # individual
            out[CAP] = get_capacity_individual(raw_course)
            out[CAMPUS] = 'A01'
            if course == '4920R':
                out[LEC] = 'INT'
            elif subject == 'SET' and course == '1000':
                out[LEC] = 'LAB'
            else:
                out[LEC] = 'INV'
            out[WLF] = '0'
            out[DELIVERY] = 'P'
    else:
        # lecture class
        if raw_room != '':
            (building, room) = raw_room.split()
            out[BLDG] = building.upper()
            out[ROOM] = room
            if raw_room in CAPACITY_MAP:
                out[CAP] = CAPACITY_MAP[raw_room]
            else:
                print('unknown room capacity:', row)
                sys.exit(1)
        (out[DAYS], out[BEGTIME], out[ENDTIME]) = split_time(raw_time)
        out[CAMPUS] = 'A01'
        out[LEC] = 'LEC'
        out[DELIVERY] = 'P'
        out[WLF] = credits

    if section_n.endswith('A'):
        out[SESSION] = '6'
    elif section_n.endswith('B'):
        out[SESSION] = '7'
    else:
        out[SESSION] = '1'

    out[ACTIVE] = 'A'
    out[CREDITS] = credits
    out[BUD] = 'BA'
    out[ENROLL] = '0'
    #out[WAITCAP] = '25'
    out[WAITACT] = '0'

    return out

def merge(past, future):
    out = [past[0]]
    out[0].append('')
    past = past[1:]
    end_marker = future[-1][:]
    end_marker[COURSE] = '9999'
    past.append(end_marker)

    for frow in future:
        this_course = (frow[SUBJECT], frow[COURSE])
        prow = past[0]

        # skip over leftovers from previous course
        while (prow[SUBJECT], prow[COURSE]) < this_course:
            if prow[CRN] == '' or skip_row(prow[SUBJECT], prow[COURSE], prow[SECTION]):
                prow.append('SKIP')
            else:
                prow.append('DELETE')
            out.append(prow)
            past = past[1:]
            prow = past[0]

        # any sections to be deleted, e.g., an old 03 before 40
        while (prow[SUBJECT], prow[COURSE]) == this_course and prow[SECTION][0] < frow[SECTION][0]:
            prow.append('DELETE')
            out.append(prow)
            past = past[1:]
            prow = past[0]

        # match?
        if (prow[SUBJECT], prow[COURSE]) == this_course:
            if sections_match(prow[SECTION], frow[SECTION]):
                frow[CRN] = prow[CRN] # copy CRN
                frow[TITLE] = prow[TITLE] # copy title
                frow.append(diff(prow, frow))
                out.append(frow)
                past = past[1:]
                prow = past[0]
                continue

        # insert a new section?
        frow.append('INSERT')
        out.append(frow)

    return out[:-1]

def sections_match(a, b):
    (a, b) = (str(a).upper(), str(b).upper())
    return a == b or '0'+a == b or a == '0'+b

def skip_row(subject, course, section):
    if subject == 'IT' and course in ('4060', '4070'):
        return True
    if section.endswith('S') or section.endswith('J') or section.endswith('X'):
        return True
    return False

def get_credits(course):
    if course == 'IT 4990-01': return '1'
    if course.startswith('SET 1000'): return '1'
    if course.startswith('CS 4800R'): return '1'
    if course.startswith('CS 4920R'): return '1'
    if course.startswith('CS 4991R'): return '0.5'
    if course.startswith('CS 4992R'): return '1'
    if course.startswith('SET 1000'): return '0'
    return '3'

def get_capacity_individual(course):
    if course == 'CS 4920R-01': return '10'
    if course == 'CS 4800R-01': return '10'
    if course == 'CS 4800R-02': return '5'
    return '10'

def split_time(time_slot):
    days = ''
    plus = time_slot.index('+')
    for (index, ch) in enumerate(time_slot):
        if ch.isdigit():
            (days, start) = (time_slot[:index], time_slot[index:plus])
            break
    minutes = int(time_slot[plus+1:], 10)
    start_hour = int(start[:2], 10)
    start_minute = int(start[2:], 10)
    end = start_minute + minutes
    end_hour = start_hour + end//60
    end_minute = end%60
    end = f'{end_hour:02d}{end_minute:02d}'
    return (days, start, end)
    

def diff(left, right):
    key = '....'
    for i in range(4, len(left)):
        if left[i] == right[i]:
            key += '.'
        else:
            key += '*'
    return key

def main():
    old = get_old(PREVIOUS_FILE)
    new = [split_fields(row) for row in get_new(DB_FILE, ID)]
    new = [row for row in new if row is not None]
    new.append(split_fields(['', 'ZZ 1111-11', 'Smith 109', 'MWF0700+50']))
    new.sort(key=lambda row: (row[SUBJECT], row[COURSE], row[SECTION], row[DAYS] if len(row[DAYS]) > 1 else '~'+row[DAYS], row[BEGTIME]))
    out = merge(old, new)
    with open(NEW_CSV, 'w') as fp:
        writer = csv.writer(fp, delimiter='\t', quoting=csv.QUOTE_ALL)
        for row in out:
            writer.writerow(row)

main()
