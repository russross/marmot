#!/usr/bin/env python3

import apsw
import contextlib
import click
import sys

DB_FILE = 'timetable.db'

@click.group()
@click.pass_context
def cli(ctx):
    db = apsw.Connection(DB_FILE, flags=apsw.SQLITE_OPEN_READWRITE)
    db.execute('PRAGMA busy_timeout = 10000')
    db.execute('PRAGMA foreign_keys = ON')
    db.execute('PRAGMA journal_mode = MEMORY')
    db.execute('PRAGMA locking_mode = NORMAL')
    db.execute('PRAGMA synchronous = OFF')
    db.execute('PRAGMA temp_store = MEMORY')
    db.execute('PRAGMA mmap_size = 100000000')
    ctx.obj = ctx.with_resource(db)

@cli.command()
@click.argument('term')
@click.argument('start_date')
@click.argument('end_date')
@click.pass_obj
def make_term(db, term, start_date, end_date):
    db.execute('INSERT INTO terms VALUES (?, ?, ?, ?)', (term, start_date, end_date, True))

@cli.command()
@click.argument('holiday')
@click.pass_obj
def make_holiday(db, holiday):
    db.execute('INSERT INTO holidays VALUES ((SELECT term FROM terms WHERE current), ?)', (holiday,))

@cli.command()
@click.argument('building')
@click.pass_obj
def make_building(db, building):
    db.execute('INSERT INTO buildings VALUES ((SELECT term FROM terms WHERE current), ?)', (building,))

@cli.command()
@click.argument('room')
@click.argument('capacity', type=int)
@click.argument('room_tags', nargs=-1)
@click.pass_obj
def make_room(db, room, capacity, room_tags):
    db.execute('INSERT INTO rooms VALUES ((SELECT term FROM terms WHERE current), ?, ?)', (room, capacity))
    for room_tag in room_tags + (room, ):
        (n,) = db.execute('SELECT COUNT(1) FROM room_tags NATURAL JOIN terms WHERE current AND room_tag = ?', (room_tag,)).fetchone() 
        if n == 0:
            db.execute('INSERT INTO room_tags VALUES ((SELECT term FROM terms WHERE current), ?)', (room_tag,))
        db.execute('INSERT INTO rooms_room_tags VALUES ((SELECT term FROM terms WHERE current), ?, ?)', (room_tag, room))

@cli.command()
@click.argument('time_slot')
@click.argument('time_slot_tags', nargs=-1)
@click.pass_obj
def make_time_slot(db, time_slot, time_slot_tags):
    db.execute('INSERT INTO time_slots VALUES ((SELECT term FROM terms WHERE current), ?)', (time_slot,))
    for time_slot_tag in time_slot_tags + (time_slot, ):
        (n,) = db.execute('SELECT COUNT(1) FROM time_slot_tags NATURAL JOIN terms WHERE current AND time_slot_tag = ?', (time_slot_tag,)).fetchone() 
        if n == 0:
            db.execute('INSERT INTO time_slot_tags VALUES ((SELECT term FROM terms WHERE current), ?)', (time_slot_tag,))
        db.execute('INSERT INTO time_slots_time_slot_tags VALUES ((SELECT term FROM terms WHERE current), ?, ?)', (time_slot_tag, time_slot))

@cli.command()
@click.argument('department')
@click.pass_obj
def make_department(db, department):
    db.execute('INSERT INTO departments VALUES ((SELECT term FROM terms WHERE current), ?)', (department,))

@cli.command()
@click.argument('faculty')
@click.argument('department')
@click.argument('availability')
@click.pass_obj
def make_faculty(db, faculty, department, availability):
    week = 'MTWRFSU'

    # parse the availability string: "MWF 0900-1200 with penalty 10, ..."
    all_intervals = [ [ -1 for interval in range(24*60//5) ] for day in range(7) ]
    for span in availability.split(','):
        days = []
        span = span.strip()
        while len(span) > 0 and span[0].upper() in week:
            days.append(week.index(span[0].upper()))
            span = span[1:]
        if len(days) == 0:
            print(f'faculty {faculty} availability span must start with days of week, e.g., MWF')
            sys.exit(1)
        span = span.strip()

        start = ''
        while len(span) > 0 and span[0].isdigit():
            start += span[0]
            span = span[1:]
        if span[0] != '-':
            print(f'faculty {faculty} availability span time must be of form start-end, e.g., 0800-1030')
            sys.exit(1)
        span = span[1:]
        end = ''
        while len(span) > 0 and span[0].isdigit():
            end += span[0]
            span = span[1:].strip()
        if len(start) < 3 or len(start) > 4 or len(end) < 3 or len(end) > 4:
            print(f'faculty {faculty} availability span time must be of form start-end, e.g., 0800-1030')
            sys.exit(1)
        start = ('0000' + start)[-4:]
        end = ('0000' + end)[-4:]
        start_time = int(start[:2]) * 60 + int(start[2:])
        end_time = int(end[:2]) * 60 + int(end[2:])
        if start_time % 5 != 0 or end_time % 5 != 0 or start_time >= end_time or end_time > 24*60:
            print(f'faculty {faculty} start must come before end time and end time must be before midnight')
            sys.exit(1)

        penalty = 0
        if span.startswith('with penalty '):
            span = span[len('with penalty '):]
            penalty = int(span)
        elif span != '':
            print(f'faculty {faculty} availability span must end with no penalty or "with penalty xyz"')
            sys.exit(1)
        if penalty < 0 or penalty > 99:
            print(f'faculty {faculty} availability span penalty must be between 0 and 99')
            sys.exit(1)

        for day in days:
            for interval in range(start_time//5, end_time//5):
                all_intervals[day][interval] = max(all_intervals[day][interval], penalty)

    db.execute('INSERT INTO faculty VALUES ((SELECT term FROM terms WHERE current), ?, ?)', (faculty, department))
        
    # now reformat it for the db
    entries = []
    for (day, intervals) in zip(week, all_intervals):
        start = 0
        prev = -1
        for (minute, penalty) in zip(range(0, 24*60, 5), intervals):
            if penalty == prev:
                continue
            if prev >= 0:
                # end of a range
                entries.append((day, start, minute, prev))
            if penalty >= 0:
                start = minute
            prev = penalty
        if prev >= 0:
            entries.append((day, start, minute, prev))

    for (day, start, end, penalty) in entries:
        duration = end - start
        db.execute('INSERT INTO faculty_availability VALUES ((SELECT term FROM terms WHERE current), ?, ?, ?, ?, ?)', (faculty, day, start, duration, penalty))



@cli.command()
@click.argument('faculty')
@click.argument('days_to_check')
@click.argument('days_off')
@click.pass_obj
def faculty_default_clustering(db, faculty, days_to_check, days_off):
    db.execute('INSERT INTO faculty_preferences VALUES ((SELECT term FROM terms WHERE current), ?, ?, ?, ?, ?, ?)',
            (faculty, days_to_check, 0 if days_off == 'no_preference' else int(days_off), 0 if days_off == 'no_preference' else 10, 10, 15))
    intervals = (
        (True, True, 110, 5),
        (True, False, 165, 10),
        (False, True, 60, 10),
        (False, False, 105, 5),
        (False, False, 195, 10),
    )
    for (is_cluster, is_too_short, interval_minutes, interval_penalty) in intervals:
        db.execute('INSERT INTO faculty_preference_intervals VALUES ((SELECT term FROM terms WHERE current), ?, ?, ?, ?, ?)',
            (faculty, is_cluster, is_too_short, interval_minutes, interval_penalty))

@cli.command()
@click.argument('faculty')
@click.argument('days_to_check')
@click.argument('days_off')
@click.argument('intervals', nargs=-1)
@click.pass_obj
def faculty_custom_clustering(db, faculty, days_to_check, days_off, intervals):
    # note: interval format is: cluster/gap,too_short/too_long,minutes,penalty
    # e.g.: cluster,too_short,110,5
    db.execute('INSERT INTO faculty_preferences VALUES ((SELECT term FROM terms WHERE current), ?, ?, ?, ?, ?, ?)',
            (faculty, days_to_check, 0 if days_off == 'no_preference' else int(days_off), 0 if days_off == 'no_preference' else 10, 10, 15))
    for interval_raw in intervals:
        parts = interval_raw.split(',')
        if len(parts) != 4:
            print(f'faculty {faculty} custom cluster must be of the form cluster/gap,too_short/too_long,minutes,penalty')
            sys.exit(1)

        if parts[0] == 'cluster': is_cluster = True
        elif parts[0] == 'gap': is_cluster = False
        else:
            print(f'faculty {faculty} custom cluster first field must be "cluster" or "gap"')
            sys.exit(1)

        if parts[1] == 'too_short': is_too_short = True
        elif parts[1] == 'too_long': is_too_short = False
        else:
            print(f'faculty {faculty} custom cluster second field must be "too_short" or "too_long"')
            sys.exit(1)

        interval_minutes = int(parts[2])
        if interval_minutes < 5 or interval_minutes > 12*60:
            print(f'faculty {faculty} custom cluster minutes does not seem reasonable')
            sys.exit(1)

        interval_penalty = int(parts[3])
        if interval_penalty < 1 or interval_penalty >= 20:
            print(f'faculty {faculty} custom cluster penalty is out of range')
            sys.exit(1)

        db.execute('INSERT INTO faculty_preference_intervals VALUES ((SELECT term FROM terms WHERE current), ?, ?, ?, ?, ?)',
            (faculty, is_cluster, is_too_short, interval_minutes, interval_penalty))

@cli.command()
@click.argument('department')
@click.argument('course')
@click.argument('course_name')
@click.pass_obj
def make_course(db, department, course, course_name):
    db.execute('INSERT INTO courses VALUES ((SELECT term FROM terms WHERE current), ?, ?, ?)', (course, department, course_name))

@cli.command()
@click.argument('course')
@click.argument('prereqs', nargs=-1)
@click.pass_obj
def add_prereqs(db, course, prereqs):
    for elt in prereqs:
        db.execute('INSERT INTO prereqs VALUES ((SELECT term FROM terms WHERE current), ?, ?)', (course, elt))

@cli.command()
@click.argument('course')
@click.argument('coreqs', nargs=-1)
@click.pass_obj
def add_coreqs(db, course, coreqs):
    for elt in coreqs:
        db.execute('INSERT INTO coreqs VALUES ((SELECT term FROM terms WHERE current), ?, ?)', (course, elt))

@cli.command()
@click.argument('section')
@click.argument('tags', nargs=-1)
@click.pass_obj
def make_section(db, section, tags):
    db.execute('INSERT INTO sections VALUES ((SELECT term FROM terms WHERE current), ?)', (section, ))
    for tag in tags:
        colon = tag.find(':')
        if colon >= 0:
            penalty = int(tag[colon+1:])
            tag = tag[:colon]
        else:
            penalty = 0
        (room_tags,) = db.execute('SELECT COUNT(1) FROM room_tags NATURAL JOIN terms WHERE current AND room_tag = ?', (tag,)).fetchone()
        (time_slot_tags,) = db.execute('SELECT COUNT(1) FROM time_slot_tags NATURAL JOIN terms WHERE current AND time_slot_tag = ?', (tag,)).fetchone()
        if room_tags == 0 and time_slot_tags == 0:
            print(f'section {section} tag "{tag}" not found as room_tag or time_slot_tag')
            sys.exit(1)
        elif room_tags > 0 and time_slot_tags > 0:
            print(f'section {section} tag "{tag}" found as both room_tag and time_slot_tag, unable to proceed')
            sys.exit(1)
        elif room_tags > 0:
            db.execute('INSERT INTO section_room_tags VALUES ((SELECT term FROM terms WHERE current), ?, ?, ?)', (section, tag, penalty))
        elif time_slot_tags > 0:
            db.execute('INSERT INTO section_time_slot_tags VALUES ((SELECT term FROM terms WHERE current), ?, ?, ?)', (section, tag, penalty))

@cli.command()
@click.argument('faculty')
@click.argument('sections', nargs=-1)
@click.pass_obj
def assign_faculty_sections(db, faculty, sections):
    for section in sections:
        db.execute('INSERT INTO faculty_sections VALUES ((SELECT term FROM terms WHERE current), ?, ?)', (faculty, section))

@cli.command()
@click.argument('primary')
@click.argument('sections', nargs=-1)
@click.pass_obj
def add_cross_listing(db, primary, sections):
    if len(sections) < 1:
        print(f'add_cross_listing needs at least two sections to cross list')
        sys.exit(1)
    db.execute('INSERT INTO cross_listings VALUES ((SELECT term FROM terms WHERE current), ?)', (primary,))
    for section in sections:
        db.execute('INSERT INTO cross_listing_sections VALUES ((SELECT term FROM terms WHERE current), ?, ?)', (section, primary))

@cli.command()
@click.argument('penalty')
@click.argument('single')
@click.argument('group', nargs=-1)
@click.pass_obj
def add_anti_conflict(db, penalty, single, group):
    if len(group) < 1:
        print(f'add_anti_conflict needs at least one section in the group')
        sys.exit(1)
    db.execute('INSERT INTO anti_conflicts VALUES ((SELECT term FROM terms WHERE current), ?, ?)', (single, int(penalty)))
    for elt in group:
        if '-' not in elt:
            db.execute('INSERT INTO anti_conflict_courses VALUES ((SELECT term FROM terms WHERE current), ?, ?)', (single, elt))
        else:
            db.execute('INSERT INTO anti_conflict_sections VALUES ((SELECT term FROM terms WHERE current), ?, ?)', (single, elt))

@cli.command()
@click.argument('program')
@click.argument('department')
@click.pass_obj
def make_program(db, program, department):
    db.execute('INSERT INTO programs VALUES ((SELECT term FROM terms WHERE current), ?, ?)', (program, department))

@cli.command()
@click.argument('program')
@click.argument('conflict_name')
@click.argument('conflict_penalty')
@click.argument('maximize')
@click.argument('courses', nargs=-1)
@click.pass_obj
def make_conflict(db, program, conflict_name, conflict_penalty, maximize, courses):
    if maximize == 'maximize':
        maximize = True
    elif maximize == 'minimize':
        maximize = False
    else:
        print(f'make_conflict: {program} {conflict_name}: maximize option must be "maximize" or "minimize"')
        sys.exit(1)
    conflict_penalty = int(conflict_penalty)
    if conflict_penalty < 0 or conflict_penalty > 100:
        print(f'make_conflict: {program} {conflict_name}: conflict penalty option must be between 0 and 100')
        sys.exit(1)

    db.execute('INSERT INTO conflicts VALUES ((SELECT term FROM terms WHERE current), ?, ?, ?, ?)', (program, conflict_name, conflict_penalty, maximize))

    for elt in courses:
        if '-' not in elt:
            (n,) = db.execute('SELECT COUNT(1) FROM courses NATURAL JOIN terms WHERE current AND course = ?', (elt,)).fetchone()
            if n == 0:
                print(f'make_conflict error: "{program}" "{conflict_name}": no course "{elt}" found, skipping')
            else:
                db.execute('INSERT INTO conflict_courses VALUES ((SELECT term FROM terms WHERE current), ?, ?, ?)', (program, conflict_name, elt))
        else:
            db.execute('INSERT INTO conflict_sections VALUES ((SELECT term FROM terms WHERE current), ?, ?, ?)', (program, conflict_name, elt))


try:
    cli()
except apsw.Error as e:
    cmd = sys.argv[0]
    for elt in sys.argv[1:]:
        if len([ch for ch in elt if not ch.isalpha() and not ch.isdigit()]) > 0:
            cmd += ' ' + repr(elt)
        else:
            cmd += ' ' + elt
    print(f'{cmd}')
    print(f'--> error: {e}')
    sys.exit(1)
